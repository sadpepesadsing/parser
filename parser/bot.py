import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from config import API_TOKEN
from database.db import init_db, add_user_channel, add_monitor_channel, get_user_channels

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–ê =====
builder = InlineKeyboardBuilder()
builder.add(InlineKeyboardButton(text="üìå –ú–æ–∏ –∫–∞–Ω–∞–ª—ã", callback_data='my_channels'))
builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='add_channel'))
builder.add(InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data='info'))
builder.adjust(2)
main_menu = builder.as_markup()

async def make_channels_buttons(channels: tuple):
    builder = InlineKeyboardBuilder()
    for channel in channels:
        builder.add(InlineKeyboardButton(text=channel, callback_data=channel))
    builder.adjust(2)
    channels_btns = builder.as_markup()
    return channels_btns

# ===== –•–≠–ù–î–õ–ï–†–´ =====
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@dp.callback_query(lambda c: c.data == "info")
async def cmd_help(callback: types.CallbackQuery):
    await callback.message.answer("‚ùì –°–ø—Ä–∞–≤–∫–∞:\n\n"
                         "üìå '–ú–æ–π –∫–∞–Ω–∞–ª' ‚Äî —É–∫–∞–∂–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª.\n"
                         "‚ûï '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' ‚Äî –¥–æ–±–∞–≤—å –∫–∞–Ω–∞–ª—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–ª–µ–¥–∏—Ç—å.\n"
                         "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ!")

# ===== –ú–û–ô –ö–ê–ù–ê–õ =====
@dp.callback_query(lambda c: c.data == "my_channels")
async def ask_user_channel(callback: types.CallbackQuery):
    await callback.message.answer("...")
    user_id = callback.from_user.id
    channels = await get_user_channels(user_id)
    btns = await make_channels_buttons(channels)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª", reply_markup=btns)
    #–¥–∞–ª—å—à–µ –Ω–µ –µ–±—É —á–µ –¥–µ–ª–∞—Ç—å —Ç—É—Ç —Ç–∏–ø–∞ –∫–Ω–æ–ø–æ—á–∫–∏ —Å –∫–∞–Ω–∞–ª–∞–º–∏
    #–∫–æ—Ä–æ—á–µ —è —Å–ø–∞—Ç—å —Ö–æ—á—É —Ö–∑ —Ä–∞–∑–±–µ—Ä–µ—à—å—Å—è –∏–ª–∏ –Ω–µ—Ç —á—Ç–æ —Ç—É—Ç –∫ —á–µ–º—É
    #–∑–∞–≤—Ç—Ä–∞ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ø–∏—Å–∞—Ç—å
    #–µ—Å–ª–∏ –ø—Ä–∏–µ–¥—É –∑–∞–≤—Ç—Ä–∞ –∏ –Ω–µ —É—Å–Ω—É, –∞ –∫–∞—Å–∫–∞–¥ –±—É–¥–µ—Ç –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É—é –µ–±–∞–Ω—É—Ç—å —à—Ç—É–∫—É —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∫–∞–Ω–∞–ª–æ–≤
    #–æ–Ω –ø—Ä–æ—Å—Ç–æ —É –º–µ–Ω—è —É–∂–µ –ø–æ–ª—É—á–∞–ª—Å—è –≤ –æ–¥–Ω–æ–º –ª–∏—à—å —Ñ–∞–π–ª–µ –º–µ–π–Ω, –Ω–æ —è –Ω–µ –µ–±—É –∫–∞–∫ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ,
    #–∞ —Ç–∞–∫ –∫–∞–∫ —É –º–µ–Ω—è –≥–ø—Ç —Å–¥–æ—Ö, –∂–¥–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è


# ===== –î–û–ë–ê–í–ò–¢–¨ –ö–ê–ù–ê–õ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê =====
@dp.callback_query(lambda c: c.data == "add_channel")
async def ask_monitor_channel(callback: types.CallbackQuery):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª")
    dp.message.register(save_user_channel, lambda m: m.from_user.id == callback.from_user.id)

async def save_user_channel(message: types.Message):
    user_id = message.from_user.id
    user_channel = message.text.strip()
    await add_user_channel(user_id, user_channel)
    await message.answer(f"‚úÖ –¢–≤–æ–π –∫–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {user_channel}", reply_markup=main_menu)

async def save_monitor_channel(message: types.Message):
    user_id = message.from_user.id
    monitor_channel = message.text.strip()
    await add_monitor_channel(user_id, monitor_channel)
    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {monitor_channel} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!", reply_markup=main_menu)

# ===== –ó–ê–ü–£–°–ö =====
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
