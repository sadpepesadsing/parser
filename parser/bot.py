import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import API_TOKEN
from database.db import init_db, add_user_channel, add_monitor_channel, get_user_channels, get_monitor_channels, user_channel_exists, remove_monitor_channel

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å MemoryStorage
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_user_channel = State()
    waiting_for_monitor_channel = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
user_last_messages = {}

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def delete_previous_messages(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_last_messages:
        for msg_id in user_last_messages[user_id]:
            try:
                await bot.delete_message(user_id, msg_id)
            except:
                pass
        user_last_messages[user_id] = []

async def send_message_with_cleanup(user_id: int, text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–∏—Å—Ç–∫–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö"""
    await delete_previous_messages(user_id)
    message = await bot.send_message(user_id, text, reply_markup=reply_markup)
    if user_id not in user_last_messages:
        user_last_messages[user_id] = []
    user_last_messages[user_id].append(message.message_id)
    return message

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_main_menu():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìå –ú–æ–∏ –∫–∞–Ω–∞–ª—ã", callback_data='my_channels'))
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='add_channel'))
    builder.add(InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data='info'))
    builder.adjust(2)
    return builder.as_markup()

def get_back_home_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back'))
    builder.add(InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data='home'))
    return builder.as_markup()

def get_channel_management_keyboard(user_channel: str):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f'show_monitor:{user_channel}'))
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f'add_monitor:{user_channel}'))
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_channels'))
    builder.add(InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data='home'))
    builder.adjust(2)
    return builder.as_markup()

def get_monitor_channels_keyboard(monitor_channels: tuple, user_channel: str):
    builder = InlineKeyboardBuilder()
    for channel in monitor_channels:
        builder.add(InlineKeyboardButton(text=f"‚ùå {channel}", callback_data=f'remove_monitor:{user_channel}:{channel}'))
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data=f'add_monitor:{user_channel}'))
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'back_to_channel:{user_channel}'))
    builder.add(InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data='home'))
    builder.adjust(1)
    return builder.as_markup()

async def make_channels_buttons(channels: tuple):
    builder = InlineKeyboardBuilder()
    for channel in channels:
        builder.add(InlineKeyboardButton(text=channel, callback_data=f'select_channel:{channel}'))
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª", callback_data='add_user_channel_btn'))
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back'))
    builder.add(InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data='home'))
    builder.adjust(1)
    return builder.as_markup()

# ===== –•–≠–ù–î–õ–ï–†–´ =====
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await send_message_with_cleanup(message.from_user.id, 
                                  "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                                  reply_markup=get_main_menu())

@dp.callback_query(lambda c: c.data == "info")
async def cmd_help(callback: types.CallbackQuery):
    await send_message_with_cleanup(callback.from_user.id,
                                  "‚ùì –°–ø—Ä–∞–≤–∫–∞:\n\n"
                                  "üìå '–ú–æ–π –∫–∞–Ω–∞–ª' ‚Äî —É–∫–∞–∂–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª.\n"
                                  "‚ûï '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' ‚Äî –¥–æ–±–∞–≤—å –∫–∞–Ω–∞–ª—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–ª–µ–¥–∏—Ç—å.\n"
                                  "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ!", 
                                  reply_markup=get_back_home_keyboard())
    await callback.answer()

# ===== –ú–û–ô –ö–ê–ù–ê–õ =====
@dp.callback_query(lambda c: c.data == "my_channels")
async def user_channels(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    channels = await get_user_channels(user_id)
    
    if not channels:
        await send_message_with_cleanup(user_id, 
                                      "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", 
                                      reply_markup=get_back_home_keyboard())
    else:
        btns = await make_channels_buttons(channels)
        await send_message_with_cleanup(user_id, 
                                      "üìã –¢–≤–æ–∏ –∫–∞–Ω–∞–ª—ã:\n\n–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", 
                                      reply_markup=btns)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('select_channel:'))
async def select_user_channel(callback: types.CallbackQuery):
    user_channel = callback.data.split(':')[1]
    keyboard = get_channel_management_keyboard(user_channel)
    await send_message_with_cleanup(callback.from_user.id, 
                                  f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º: {user_channel}\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", 
                                  reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('show_monitor:'))
async def show_monitor_channels(callback: types.CallbackQuery):
    user_channel = callback.data.split(':')[1]
    monitor_channels = await get_monitor_channels(user_channel)
    
    if not monitor_channels:
        await send_message_with_cleanup(callback.from_user.id, 
                                      f"üì≠ –î–ª—è –∫–∞–Ω–∞–ª–∞ {user_channel} –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.", 
                                      reply_markup=get_channel_management_keyboard(user_channel))
    else:
        channels_list = "\n".join([f"‚Ä¢ {channel}" for channel in monitor_channels])
        keyboard = get_monitor_channels_keyboard(monitor_channels, user_channel)
        await send_message_with_cleanup(callback.from_user.id, 
                                      f"üìã –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ({user_channel}):\n\n{channels_list}", 
                                      reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('add_monitor:'))
async def add_monitor_channel_handler(callback: types.CallbackQuery, state: FSMContext):
    user_channel = callback.data.split(':')[1]
    await state.update_data(user_channel=user_channel)
    await state.set_state(Form.waiting_for_monitor_channel)
    await send_message_with_cleanup(callback.from_user.id, 
                                  f"üì© –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–¥–ª—è {user_channel}):", 
                                  reply_markup=get_back_home_keyboard())
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('remove_monitor:'))
async def remove_monitor_channel_handler(callback: types.CallbackQuery):
    data = callback.data.split(':')
    user_channel = data[1]
    monitor_channel = data[2]
    
    await remove_monitor_channel(user_channel, monitor_channel)
    await send_message_with_cleanup(callback.from_user.id, 
                                  f"‚úÖ –ö–∞–Ω–∞–ª {monitor_channel} —É–¥–∞–ª—ë–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!", 
                                  reply_markup=get_back_home_keyboard())
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    monitor_channels = await get_monitor_channels(user_channel)
    if monitor_channels:
        channels_list = "\n".join([f"‚Ä¢ {channel}" for channel in monitor_channels])
        keyboard = get_monitor_channels_keyboard(monitor_channels, user_channel)
        await send_message_with_cleanup(callback.from_user.id, 
                                      f"üìã –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n{channels_list}", 
                                      reply_markup=keyboard)
    else:
        await send_message_with_cleanup(callback.from_user.id, 
                                      "üì≠ –ë–æ–ª—å—à–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.", 
                                      reply_markup=get_channel_management_keyboard(user_channel))
    await callback.answer()

# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–û–í =====
@dp.callback_query(lambda c: c.data == "add_channel")
async def add_user_channel_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.waiting_for_user_channel)
    await send_message_with_cleanup(callback.from_user.id, 
                                  "üì© –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª:", 
                                  reply_markup=get_back_home_keyboard())
    await callback.answer()

@dp.callback_query(lambda c: c.data == "add_user_channel_btn")
async def add_user_channel_btn(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.waiting_for_user_channel)
    await send_message_with_cleanup(callback.from_user.id, 
                                  "üì© –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª:", 
                                  reply_markup=get_back_home_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞
@dp.message(Form.waiting_for_user_channel)
async def save_user_channel(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_channel = message.text.strip()
    
    await add_user_channel(user_id, user_channel)
    await state.clear()
    await send_message_with_cleanup(user_id, 
                                  f"‚úÖ –¢–≤–æ–π –∫–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {user_channel}", 
                                  reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
@dp.message(Form.waiting_for_monitor_channel)
async def save_monitor_channel(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    monitor_channel = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º user_channel –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_channel = data.get("user_channel")
    
    if user_channel and await user_channel_exists(user_channel):
        await add_monitor_channel(user_channel, monitor_channel)
        await state.clear()
        
        # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É, –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        await send_message_with_cleanup(user_id, 
                                  f"‚úÖ –ö–∞–Ω–∞–ª {monitor_channel} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!\n"
                                  f"–ë–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.", 
                                  reply_markup=get_main_menu())
    else:
        await send_message_with_cleanup(user_id, 
                                  "‚ùå –û—à–∏–±–∫–∞: —Ç–≤–æ–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.", 
                                  reply_markup=get_main_menu())
        await state.clear()

# ===== –ù–ê–í–ò–ì–ê–¶–ò–Ø =====
@dp.callback_query(lambda c: c.data == "home")
async def go_home(callback: types.CallbackQuery):
    await send_message_with_cleanup(callback.from_user.id, 
                                  "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
                                  reply_markup=get_main_menu())
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back")
async def go_back(callback: types.CallbackQuery):
    await send_message_with_cleanup(callback.from_user.id, 
                                  "‚óÄÔ∏è –í–æ–∑–≤—Ä–∞—Ç:", 
                                  reply_markup=get_main_menu())
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_channels")
async def back_to_channels(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    channels = await get_user_channels(user_id)
    if channels:
        btns = await make_channels_buttons(channels)
        await send_message_with_cleanup(user_id, 
                                      "üìã –¢–≤–æ–∏ –∫–∞–Ω–∞–ª—ã:\n\n–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", 
                                      reply_markup=btns)
    else:
        await send_message_with_cleanup(user_id, 
                                      "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", 
                                      reply_markup=get_back_home_keyboard())
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('back_to_channel:'))
async def back_to_channel(callback: types.CallbackQuery):
    user_channel = callback.data.split(':')[1]
    keyboard = get_channel_management_keyboard(user_channel)
    await send_message_with_cleanup(callback.from_user.id, 
                                  f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º: {user_channel}\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", 
                                  reply_markup=keyboard)
    await callback.answer()

# ===== –ó–ê–ü–£–°–ö =====
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
