import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config import API_TOKEN
from database.db import (
    init_db, add_user_channel, add_monitor_channel,
    get_user_channels, get_monitor_channels,
    user_channel_exists, remove_monitor_channel
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä
from monitor import run_monitor

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    waiting_for_user_channel = State()
    waiting_for_monitor_channel = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
user_last_messages = {}

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def normalize_channel_link(link: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
    link = link.strip()

    if link.startswith("https://t.me/"):
        username_part = link.replace("https://t.me/", "")
        return f"@{username_part}" if not username_part.startswith('+') else link
    elif link.startswith("t.me/"):
        username_part = link.replace("t.me/", "")
        return f"@{username_part}" if not username_part.startswith('+') else f"https://{link}"
    elif link.startswith("@"):
        return link
    else:
        return link

async def delete_previous_messages(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_last_messages:
        for msg_id in user_last_messages[user_id]:
            try:
                await bot.delete_message(user_id, msg_id)
            except Exception:
                pass
        user_last_messages[user_id] = []

async def send_message_with_cleanup(user_id: int, text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–∏—Å—Ç–∫–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö"""
    await delete_previous_messages(user_id)
    message = await bot.send_message(user_id, text, reply_markup=reply_markup)

    if user_id not in user_last_messages:
        user_last_messages[user_id] = []
    user_last_messages[user_id].append(message.message_id)

    return message

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def create_main_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìå –ú–æ–∏ –∫–∞–Ω–∞–ª—ã", callback_data='my_channels'),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='add_channel')
    )
    builder.row(InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data='info'))
    return builder.as_markup()

def create_back_home_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ù–∞–∑–∞–¥ –∏ –î–æ–º–æ–π"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
        InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data='home')
    )
    return builder.as_markup()

def create_channel_management_keyboard(user_channel: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f'show_monitor:{user_channel}'),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f'add_monitor:{user_channel}')
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_channels'),
        InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data='home')
    )
    return builder.as_markup()

def create_monitor_channels_keyboard(monitor_channels: tuple, user_channel: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–Ω–∞–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    builder = InlineKeyboardBuilder()

    for channel in monitor_channels:
        builder.row(InlineKeyboardButton(
            text=f"‚ùå {channel}",
            callback_data=f'remove_monitor:{user_channel}:{channel}'
        ))

    builder.row(InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë",
        callback_data=f'add_monitor:{user_channel}'
    ))
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'back_to_channel:{user_channel}'),
        InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data='home')
    )

    return builder.as_markup()

async def create_channels_list_keyboard(channels: tuple) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤"""
    builder = InlineKeyboardBuilder()

    for channel in channels:
        builder.row(InlineKeyboardButton(
            text=channel,
            callback_data=f'select_channel:{channel}'
        ))

    builder.row(InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª",
        callback_data='add_user_channel_btn'
    ))
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back'),
        InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data='home')
    )

    return builder.as_markup()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await send_message_with_cleanup(
        message.from_user.id,
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu()
    )

@dp.callback_query(F.data == "info")
async def show_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "‚ùì –°–ø—Ä–∞–≤–∫–∞:\n\n"
        "üìå '–ú–æ–π –∫–∞–Ω–∞–ª' ‚Äî —É–∫–∞–∂–∏ —Å–≤–æ–π –∫–∞–Ω–∞–ª.\n"
        "‚ûï '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' ‚Äî –¥–æ–±–∞–≤—å –∫–∞–Ω–∞–ª—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–ª–µ–¥–∏—Ç—å.\n"
        "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ!"
    )

    await send_message_with_cleanup(
        callback.from_user.id,
        help_text,
        reply_markup=create_back_home_keyboard()
    )
    await callback.answer()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–û–ò–• –ö–ê–ù–ê–õ–û–í =====
@dp.callback_query(F.data == "my_channels")
async def show_user_channels(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    channels = await get_user_channels(user_id)
    keyboard = await create_channels_list_keyboard(channels)

    if not channels:
        message_text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?"
        await send_message_with_cleanup(user_id, message_text, create_back_home_keyboard())
    else:
        keyboard = await create_channels_list_keyboard(channels)
        await send_message_with_cleanup(user_id, "üìã –¢–≤–æ–∏ –∫–∞–Ω–∞–ª—ã:\n\n–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", keyboard)

    await callback.answer()

@dp.callback_query(F.data.startswith('select_channel:'))
async def handle_channel_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞"""
    user_channel = callback.data.split(':')[1]
    keyboard = create_channel_management_keyboard(user_channel)

    await send_message_with_cleanup(
        callback.from_user.id,
        f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º: {user_channel}\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        keyboard
    )
    await callback.answer()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê =====
@dp.callback_query(F.data.startswith('show_monitor:'))
async def show_monitor_channels(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    user_channel = callback.data.split(':')[1]
    monitor_channels = await get_monitor_channels(user_channel)

    if not monitor_channels:
        message_text = f"üì≠ –î–ª—è –∫–∞–Ω–∞–ª–∞ {user_channel} –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
        await send_message_with_cleanup(callback.from_user.id, message_text,
                                        create_channel_management_keyboard(user_channel))
    else:
        channels_list = "\n".join([f"‚Ä¢ {channel}" for channel in monitor_channels])
        keyboard = create_monitor_channels_keyboard(monitor_channels, user_channel)

        await send_message_with_cleanup(
            callback.from_user.id,
            f"üìã –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ({user_channel}):\n\n{channels_list}",
            keyboard
        )

    await callback.answer()

@dp.callback_query(F.data.startswith('add_monitor:'))
async def start_add_monitor_channel(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    user_channel = callback.data.split(':')[1]
    await state.update_data(user_channel=user_channel)
    await state.set_state(Form.waiting_for_monitor_channel)

    await send_message_with_cleanup(
        callback.from_user.id,
        f"üì© –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–¥–ª—è {user_channel}):",
        create_back_home_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith('remove_monitor:'))
async def handle_remove_monitor(callback: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    data = callback.data.split(':')
    user_channel, monitor_channel = data[1], data[2]

    await remove_monitor_channel(user_channel, monitor_channel)
    await send_message_with_cleanup(
        callback.from_user.id,
        f"‚úÖ –ö–∞–Ω–∞–ª {monitor_channel} —É–¥–∞–ª—ë–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!",
        create_back_home_keyboard()
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    monitor_channels = await get_monitor_channels(user_channel)
    if monitor_channels:
        channels_list = "\n".join([f"‚Ä¢ {channel}" for channel in monitor_channels])
        keyboard = create_monitor_channels_keyboard(monitor_channels, user_channel)
        await send_message_with_cleanup(
            callback.from_user.id,
            f"üìã –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n{channels_list}",
            keyboard
        )
    else:
        await send_message_with_cleanup(
            callback.from_user.id,
            "üì≠ –ë–æ–ª—å—à–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.",
            create_channel_management_keyboard(user_channel)
        )

    await callback.answer()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–ê–ù–ê–õ–û–í =====
@dp.callback_query(F.data == "add_channel")
@dp.callback_query(F.data == "add_user_channel_btn")
async def start_add_user_channel(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    await state.set_state(Form.waiting_for_user_channel)
    await send_message_with_cleanup(
        callback.from_user.id,
        "üì© –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª:",
        create_back_home_keyboard()
    )
    await callback.answer()

@dp.message(Form.waiting_for_user_channel)
async def save_user_channel(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_channel = normalize_channel_link(message.text.strip())
    try:
        await add_user_channel(user_id, user_channel)
        await state.clear()
        await send_message_with_cleanup(
            user_id,
            f"‚úÖ –¢–≤–æ–π –∫–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {user_channel}",
            create_main_menu()
        )
    except Exception as e:
        await state.clear()
        await send_message_with_cleanup(
            user_id,
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.",
            create_main_menu()
        )

@dp.message(Form.waiting_for_monitor_channel)
async def save_monitor_channel(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    user_id = message.from_user.id
    monitor_channel = normalize_channel_link(message.text.strip())
    data = await state.get_data()
    user_channel = data.get("user_channel")

    if not user_channel or not await user_channel_exists(user_id, user_channel):
        await state.clear()
        await send_message_with_cleanup(
            user_id,
            "‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ '–ú–æ–∏ –∫–∞–Ω–∞–ª—ã'.",
            create_main_menu()
        )
        return

    try:
        await add_monitor_channel(user_channel, monitor_channel)
        await state.clear()
        await send_message_with_cleanup(
            user_id,
            f"‚úÖ –ö–∞–Ω–∞–ª {monitor_channel} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!\n"
            f"–ë–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            f"–î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ÂèØËÉΩÈúÄË¶Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            create_main_menu()
        )
    except Exception as e:
        await state.clear()
        await send_message_with_cleanup(
            user_id,
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.",
            create_main_menu()
        )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò =====
@dp.callback_query(F.data == "home")
async def go_to_home(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é"""
    await send_message_with_cleanup(
        callback.from_user.id,
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        create_main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "back")
async def go_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–∞–¥"""
    await send_message_with_cleanup(
        callback.from_user.id,
        "‚óÄÔ∏è –í–æ–∑–≤—Ä–∞—Ç:",
        create_main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_channels")
async def back_to_channels_list(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤"""
    user_id = callback.from_user.id
    channels = await get_user_channels(user_id)

    if channels:
        keyboard = await create_channels_list_keyboard(channels)
        await send_message_with_cleanup(user_id, "üìã –¢–≤–æ–∏ –∫–∞–Ω–∞–ª—ã:\n\n–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", keyboard)
    else:
        await send_message_with_cleanup(
            user_id,
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?",
            create_back_home_keyboard()
        )

    await callback.answer()

@dp.callback_query(F.data.startswith('back_to_channel:'))
async def back_to_channel_management(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–æ–º"""
    user_channel = callback.data.split(':')[1]
    keyboard = create_channel_management_keyboard(user_channel)

    await send_message_with_cleanup(
        callback.from_user.id,
        f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º: {user_channel}\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        keyboard
    )
    await callback.answer()

# ===== –ó–ê–ü–£–°–ö =====
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await init_db()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    bot_task = asyncio.create_task(dp.start_polling(bot))
    monitor_task = asyncio.create_task(run_monitor())

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
    await asyncio.gather(bot_task, monitor_task)

if __name__ == "__main__":
    asyncio.run(main())
