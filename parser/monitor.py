# monitor.py
import asyncio
from telethon import TelegramClient, errors
from telethon.tl.types import Message, MessageMediaPhoto, Channel, Chat
from config import API_ID, API_HASH, CHECK_INTERVAL, PHONE_NUMBER
from database.db import (
    get_all_monitor_channels, get_last_post_id, update_last_post_id, 
    get_users_monitoring_channel, set_channel_subscribed, is_channel_subscribed,
    get_channels_to_subscribe
)
from bot import bot
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ChannelMonitor:
    def __init__(self):
        self.client = None
        self.is_running = False
        self.is_connected = False

    async def ensure_connection(self):
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"""
        if self.is_connected and self.client and self.client.is_connected():
            return True
        
        try:
            if self.client:
                await self.client.disconnect()
            
            self.client = TelegramClient('user_session', API_ID, API_HASH)
            await self.client.start(phone=PHONE_NUMBER)
            self.is_connected = True
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.is_connected = False
            return False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        self.is_running = True
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if await self.ensure_connection():
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã
            await self.subscribe_to_channels()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        asyncio.create_task(self.periodic_check())

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        self.is_running = False
        if self.client and self.client.is_connected():
            await self.client.disconnect()
        self.is_connected = False
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def subscribe_to_channels(self):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã"""
        try:
            if not await self.ensure_connection():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
                return
                
            channels_to_subscribe = await get_channels_to_subscribe()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(channels_to_subscribe)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
            
            for channel_username in channels_to_subscribe:
                try:
                    success = await self.subscribe_to_channel(channel_username)
                    if success:
                        await set_channel_subscribed(channel_username, True)
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {channel_username}")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel_username}")
                    
                    await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel_username}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ subscribe_to_channels: {e}")

    async def subscribe_to_channel(self, channel_username: str) -> bool:
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            if not await self.ensure_connection():
                logger.error("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
                return False
                
            if channel_username.startswith('@'):
                channel_username = channel_username[1:]
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª
            try:
                entity = await self.client.get_entity(channel_username)
            except errors.UsernameInvalidError:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {channel_username}")
                return False
            except errors.UsernameNotOccupiedError:
                logger.error(f"–ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {channel_username}")
                return False
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
            try:
                await self.client.join_channel(entity)
                await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                return True
                
            except errors.InviteRequestSentError:
                logger.warning(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {channel_username}")
                return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            except errors.UserAlreadyParticipantError:
                logger.info(f"–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel_username}")
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ join_channel –¥–ª—è {channel_username}: {e}")
                return False
            
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel_username}: {e}")
            return False

    async def get_channel_entity(self, channel_username):
        """–ü–æ–ª—É—á–∏—Ç—å entity –∫–∞–Ω–∞–ª–∞"""
        try:
            if not await self.ensure_connection():
                return None
                
            if channel_username.startswith('@'):
                channel_username = channel_username[1:]
                
            entity = await self.client.get_entity(channel_username)
            return entity
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")
            return None

    async def get_new_posts(self, channel_username):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            if not await self.ensure_connection():
                return []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª
            if not await is_channel_subscribed(channel_username):
                logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel_username}")
                success = await self.subscribe_to_channel(channel_username)
                if success:
                    await set_channel_subscribed(channel_username, True)
                else:
                    return []

            entity = await self.get_channel_entity(channel_username)
            if not entity:
                return []

            last_post_id = await get_last_post_id(channel_username)
            messages = []
            
            async for message in self.client.iter_messages(entity, limit=5):
                if message.id > last_post_id and (message.message or message.media):
                    messages.append(message)
                else:
                    break

            if messages:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –ø–æ—Å—Ç–∞
                latest_id = max(msg.id for msg in messages)
                await update_last_post_id(channel_username, latest_id)
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ {channel_username}")

            return messages

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ {channel_username}: {e}")
            return []

    async def process_message(self, message, monitor_channel):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—è—Ç —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
            user_ids = await get_users_monitoring_channel(monitor_channel)
            
            if not user_ids:
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = f"üì¢ **–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ {monitor_channel}:**\n\n"
            if message.message:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                if len(message.message) > 1000:
                    text += message.message[:1000] + "..."
                else:
                    text += message.message
            else:
                text += "üì∑ –§–æ—Ç–æ/–º–µ–¥–∏–∞"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for user_id in user_ids:
                try:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –º–µ–¥–∏–∞
                    if message.media and hasattr(message.media, 'photo'):
                        await self.send_message_with_media(user_id, text, message)
                    else:
                        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
                        await bot.send_message(user_id, text, parse_mode='Markdown')
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def send_message_with_media(self, user_id, text, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞"""
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞
            media_data = await message.download_media(file=bytes)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            await bot.send_photo(
                chat_id=user_id,
                photo=media_data,
                caption=text,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(user_id, text, parse_mode='Markdown')

    async def check_channels(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–∞ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã"""
        try:
            if not await self.ensure_connection():
                logger.warning("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É - –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                return
                
            monitor_channels = await get_all_monitor_channels()
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {len(monitor_channels)} –∫–∞–Ω–∞–ª–æ–≤")
            
            for channel in monitor_channels:
                try:
                    new_posts = await self.get_new_posts(channel)
                    for post in reversed(new_posts):  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                        await self.process_message(post, channel)
                        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_channels: {e}")

    async def periodic_check(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        check_count = 0
        while self.is_running:
            try:
                await self.check_channels()
                check_count += 1
                
                # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
                if check_count >= 10:
                    if self.client and self.client.is_connected():
                        await self.client.disconnect()
                    self.is_connected = False
                    check_count = 0
                    logger.info("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏")
                
                logger.info(f"–û–∂–∏–¥–∞–µ–º {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                await asyncio.sleep(CHECK_INTERVAL)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ periodic_check: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                self.is_connected = False
                await asyncio.sleep(60)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
monitor = ChannelMonitor()

async def start_monitor():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä"""
    await monitor.start()

async def stop_monitor():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä"""
    await monitor.stop()
